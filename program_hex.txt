// Instruções em formato hexadecimal para program.hex
// Vamos usar 32 bits para cada instrução, com os seguintes exemplos:

// 1. ADDI R1, R0, 10    // R1 = R0 + 10 -> R1 = 0 + 10 = 10
// 2. ADDI R2, R0, 20    // R2 = R0 + 20 -> R2 = 0 + 20 = 20
// 3. ADD R3, R1, R2     // R3 = R1 + R2 -> R3 = 10 + 20 = 30
// 4. SUB R4, R3, R2     // R4 = R3 - R2 -> R4 = 30 - 20 = 10
// 5. BEQ R4, R0, 4      // Se R4 == R0, salta 4 instruções
// 6. LW R5, 0(R1)       // R5 = MEM[R1 + 0] -> R5 = MEM[10] (valores fictícios de memória)
// 7. SW R6, 4(R1)       // MEM[R1 + 4] = R6 -> MEM[10 + 4] = R6
// 8. HALT               // Finaliza o programa

// Conversão para hexadecimal:

00000000  // ADDI R1, R0, 10  => 0x2001000A
00000004  // ADDI R2, R0, 20  => 0x20020014
00000008  // ADD R3, R1, R2   => 0x00032020
0000000C  // SUB R4, R3, R2   => 0x00032822
00000010  // BEQ R4, R0, 4    => 0x00030004
00000014  // LW R5, 0(R1)     => 0x8C250000
00000018  // SW R6, 4(R1)     => 0xAD260004
0000001C  // HALT             => 0x00000000 (instrução de parada)

